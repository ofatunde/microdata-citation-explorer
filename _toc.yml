get.lag.ratio <- function(df,plot.method,time.unit,outcome.type,selected_no_periods) {
  
  outcome.type <<- factor(outcome.type,levels = c("absolute","relative"))
  outcome_mapping <<- data.frame(outcome_type = c("absolute","relative"),outcome_var = c("outcome","positive.rel.value"))
  outcome_mapping$outcome_type <<- factor(outcome_mapping$outcome_type,levels =c("absolute","relative"))
  neg_periods <<- -1 * selected_no_periods
   
  if(plot.method=="standard") {
    if(time.unit == "month") {
      control_means <<- df %>% 
        dplyr::select(Account_shop_unique,period.no,outcome,selected_outcome,cycle.value,positive.rel.value,pos.rel.performance,positive.rel.value,cum.mean.value,cum.performance,any_of(lead_lags(selected_no_periods)),selected_max_rank,treat.irrev,time.since.trans) %>% 
        arrange(Account_shop_unique, period.no)%>%
        rowwise%>%
        mutate(agg.lag = sum(c_across(any_of(positive_lags(selected_no_periods))),na.rm = TRUE))%>% #remove lag 0 to take out the zero period from treatment
        ungroup%>%
        #filter(!is.na(eval(lag)))%>%
        group_by(Account_shop_unique) %>%
        #calculate cumulative years under treatment
        mutate(cum_treat = cumsum(agg.lag)-1) %>% #removed zero #-1
        ungroup %>%
        filter(selected_max_rank==2,cum_treat==0| cum_treat==-1) %>% #time.since.trans==0 #cum_treat==0| 
        group_by(Account_shop_unique)%>%
        summarize(control_mean = ifelse(outcome.type == "absolute", mean(outcome,na.rm = TRUE),ifelse(outcome.type == "relative",mean(pos.rel.performance,na.rm = TRUE),NA)))
      
      if (outcome.type == "absolute"){
        
        lag_ests <<- df%>%
          dplyr::select(Account_shop_unique,period.no,outcome,cycle.value,selected_outcome,positive.rel.value,pos.rel.performance,cum.mean.value,cum.performance,any_of(lead_lags(selected_no_periods)),selected_max_rank,treat.irrev,time.since.trans) %>% 
          arrange(Account_shop_unique, period.no) %>%
          rowwise%>%
          mutate(agg.lag = sum(c_across(any_of(positive_lags(selected_no_periods))),na.rm = TRUE))%>% #removed lag 0 to take out the zero period from treatment
          ungroup%>%
          #filter(!is.na(eval(lag)))%>%
          group_by(Account_shop_unique)%>%
          #calculate cumulative years under treatment
          mutate(cum_treat = cumsum(agg.lag)-1) %>% #removed -1
          mutate(cum_treat2 = time.since.trans) %>% 
          ungroup%>%
          filter(selected_max_rank == 2,time.since.trans>=neg_periods,time.since.trans<=selected_no_periods) %>% #keep treatment years
          left_join(control_means,by = "Account_shop_unique") %>% #merge in control means
          #calculating estimates matching on municipality
          filter(!is.na(control_mean),control_mean >0) %>% #,control_mean >0
          group_by(Account_shop_unique)%>%
          rowwise %>%
          mutate(shop_est = outcome / control_mean) %>%
          ungroup %>%
          group_by(cum_treat2) %>%
          #average across municipalities by lag
          summarise(estimate = mean(shop_est,na.rm = TRUE),n_shops = n_distinct(Account_shop_unique),se=(sd(shop_est,na.rm = TRUE)/sqrt(n_shops)),upper=estimate+1.96*se,lower=ifelse((estimate-1.96*se)<0,0,estimate-1.96*se))
        
      } else if (outcome.type == "relative") {
        
        lag_ests <<- df%>%
          dplyr::select(Account_shop_unique,period.no,outcome,selected_outcome,positive.rel.value,pos.rel.performance,cum.performance,any_of(lead_lags(selected_no_periods)),selected_max_rank,treat.irrev,time.since.trans) %>% 
          arrange(Account_shop_unique, period.no) %>%
          rowwise%>%
          mutate(agg.lag = sum(c_across(any_of(positive_lags(selected_no_periods))),na.rm = TRUE))%>% #removed lag 0 to take out the zero period from treatment
          ungroup%>%
          #filter(!is.na(eval(lag)))%>%
          group_by(Account_shop_unique)%>%
          #calculate cumulative years under treatment
          mutate(cum_treat = cumsum(agg.lag)-1) %>% #removed -1
          mutate(cum_treat2 = time.since.trans) %>% 
          ungroup%>%
          filter(selected_max_rank == 2,time.since.trans>=neg_periods,time.since.trans<=selected_no_periods) %>% #keep treatment years
          left_join(control_means,by = "Account_shop_unique") %>% #merge in control means
          #calculating estimates matching on municipality
          filter(!is.na(control_mean))%>% #,control_mean >0
          group_by(Account_shop_unique)%>%
          rowwise%>%
          mutate(shop_est = pos.rel.performance / control_mean) %>% # / control_mean (removed denominator since rel value is already a ratio)
          ungroup%>%
          group_by(cum_treat2) %>%
          #average across municipalities by lag
          summarise(estimate = mean(shop_est,na.rm = TRUE),n_shops = n_distinct(Account_shop_unique),se=(sd(shop_est,na.rm = TRUE)/sqrt(n_shops)),upper=estimate+1.96*se,lower=ifelse((estimate-1.96*se)<0,0,estimate-1.96*se))
        
      }
      
      #lag_ests$cum_treat<<-as.character(lag_ests$cum_treat)
      #lag_ests$estimate<<-as.numeric(lag_ests$estimate)
      #lag_ests$n_shops<<-as.numeric(lag_ests$n_shops)
      #lag_ests[1,1]<<-eval(lag)
      #lag_ests[1,2]<<-lag_ests[1,2]
      #lag_ests[1,3]<<-lag_ests[1,3]
      #lag_ests$cum_treat2=as.factor(lag_ests$cum_treat2)
      return(lag_ests)
      
    } else if (time.unit == "cycle") {
      control_means <<- df %>% 
        dplyr::select(Account_shop_unique,period.no,outcome,selected_outcome,positive.rel.value,pos.rel.performance,cum.performance,any_of(lead_lags(selected_no_periods)),selected_max_rank,treat.irrev,time.since.trans) %>% 
        arrange(Account_shop_unique, period.no)%>%
        rowwise%>%
        mutate(agg.lag = sum(c_across(any_of(positive_lags(selected_no_periods))),na.rm = TRUE))%>% #remove lag 0 to take out the zero period from treatment
        ungroup%>%
        #filter(!is.na(eval(lag)))%>%
        group_by(Account_shop_unique)%>%
        #calculate cumulative years under treatment
        mutate(cum_treat = cumsum(agg.lag)-1) %>% #removed zero
        filter(selected_max_rank==2,cum_treat==0| cum_treat==-1) %>% #time.since.trans==0
        summarise(control_mean = ifelse(outcome.type == "absolute", mean(outcome,na.rm = TRUE),ifelse(outcome.type == "relative",mean(pos.rel.performance,na.rm = TRUE))))
      
      if (outcome.type == "absolute"){
        
        lag_ests <<- df%>%
          dplyr::select(Account_shop_unique,period.no,outcome,selected_outcome,positive.rel.value,pos.rel.performance,cum.performance,any_of(lead_lags(selected_no_periods)),selected_max_rank,treat.irrev,time.since.trans) %>% 
          arrange(Account_shop_unique, period.no) %>%
          rowwise%>%
          mutate(agg.lag = sum(c_across(any_of(positive_lags(selected_no_periods))),na.rm = TRUE))%>% #removed lag 0 to take out the zero period from treatment
          ungroup%>%
          #filter(!is.na(eval(lag)))%>%
          group_by(Account_shop_unique)%>%
          #calculate cumulative years under treatment
          mutate(cum_treat = cumsum(agg.lag)-1) %>%
          mutate(cum_treat2 = time.since.trans) %>% 
          filter(selected_max_rank == 2,time.since.trans>=neg_periods,time.since.trans<=selected_no_periods) %>% #keep treatment years
          left_join(control_means) %>% #merge in control means
          #calculating estimates matching on municipality
          filter(!is.na(control_mean))%>%
          rowwise%>%
          mutate(shop_est = outcome / control_mean) %>%
          ungroup%>%
          group_by(cum_treat2) %>%
          #average across municipalities by lag
          summarise(estimate = mean(shop_est,na.rm = TRUE),n_shops = n_distinct(Account_shop_unique),se=(sd(shop_est,na.rm = TRUE)/sqrt(n_shops)),upper=estimate+1.96*se,lower=ifelse((estimate-1.96*se)<0,0,estimate-1.96*se))
        
      } else if (outcome.type == "relative") {
        
        lag_ests <<- df%>%
          dplyr::select(Account_shop_unique,period.no,outcome,selected_outcome,positive.rel.value,pos.rel.performance,cum.performance,any_of(lead_lags(selected_no_periods)),selected_max_rank,treat.irrev,time.since.trans) %>% 
          arrange(Account_shop_unique, period.no) %>%
          rowwise%>%
          mutate(agg.lag = sum(c_across(any_of(positive_lags(selected_no_periods))),na.rm = TRUE))%>% #removed lag 0 to take out the zero period from treatment
          ungroup%>%
          #filter(!is.na(eval(lag)))%>%
          group_by(Account_shop_unique)%>%
          #calculate cumulative years under treatment
          mutate(cum_treat = cumsum(agg.lag)-1) %>%
          mutate(cum_treat2 = time.since.trans) %>% 
          filter(selected_max_rank == 2,time.since.trans>=neg_periods,time.since.trans<=selected_no_periods) %>% #keep treatment years
          left_join(control_means) %>% #merge in control means
          #calculating estimates matching on municipality
          filter(!is.na(control_mean))%>%
          rowwise%>%
          mutate(shop_est = pos.rel.performance / control_mean) %>% #  (removed denominator since rel value is already a ratio)
          ungroup%>%
          group_by(cum_treat2) %>%
          #average across municipalities by lag
          summarise(estimate = mean(shop_est,na.rm = TRUE),n_shops = n_distinct(Account_shop_unique),se=(sd(shop_est,na.rm = TRUE)/sqrt(n_shops)),upper=estimate+1.96*se,lower=ifelse((estimate-1.96*se)<0,0,estimate-1.96*se))
        
      }
    }
  }
   

}

# Table of contents
# Learn more at https://jupyterbook.org/customize/toc.html

format: jb-book
root: intro
options:
  numbered: true
  only_build_toc_files: true
#repository:
#  url: https://github.com/ofatunde/microdata-citation-explorer
#html:
#  use_repository_button: true
#  use_issues_button: true
chapters:
- file: background-and-context
- file: proposed-solution
- file: methods
  sections:
    - file: methods/query-generation
    - file: methods/semantic-search
    - file: methods/topic-modeling-and-sentiment-analysis
    - file: methods/network-analysis
- file: results
  sections:
    - file: results/model-output
    - file: results/evaluating-model-performance
- file: implementation-options
- file: case-study
- file: contributors
- file: bibliography
- url: https://ofatunde-mdl-explorer-app-appmain-r0x5v9.streamlit.app/
  title: Live demo
- url: https://github.com/ofatunde/mdl-explorer-app
  title: Code repository

